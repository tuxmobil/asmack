--- org/jivesoftware/smack/PacketReader.java
+++ org/jivesoftware/smack/PacketReader.java
@@ -315,6 +315,14 @@ class PacketReader {
                         // to be sent by the server
                         resetParser();
                     }
+                    else {
+                    	try {
+                    		UnknownPacket packet = (UnknownPacket) PacketParserUtils.parsePacketExtension(parser.getName(), parser.getNamespace(), parser);
+                    		processPacket(packet);
+                    	} catch (ClassCastException ex) {
+                    		// ignore
+                    	}
+                    }
                 }
                 else if (eventType == XmlPullParser.END_TAG) {
                     if (parser.getName().equals("stream")) {
@@ -410,6 +418,14 @@ class PacketReader {
                 else if (parser.getName().equals("register")) {
                     connection.getAccountManager().setSupportsAccountCreation(true);
                 }
+                else {
+                	try {
+                		UnknownPacket packet = (UnknownPacket) PacketParserUtils.parsePacketExtension(parser.getName(), parser.getNamespace(), parser);
+                		processPacket(packet);
+                	} catch (ClassCastException ex) {
+                		// ignore
+                	}
+                }
             }
             else if (eventType == XmlPullParser.END_TAG) {
                 if (parser.getName().equals("starttls")) {
--- org/jivesoftware/smack/Roster.java
+++ org/jivesoftware/smack/Roster.java
@@ -71,6 +71,8 @@ public class Roster {
     
     private String requestPacketId;
 
+	private boolean mOfflineOnError = true;
+
     /**
      * Returns the default subscription processing mode to use when a new Roster is created. The
      * subscription processing mode dictates what action Smack will take when subscription
@@ -134,7 +136,8 @@ public class Roster {
 
             public void connectionClosedOnError(Exception e) {
                 // Changes the presence available contacts to unavailable
-                setOfflinePresences();
+            	if (mOfflineOnError)
+            		setOfflinePresences();
             }
 
         };
@@ -184,7 +187,11 @@ public class Roster {
     public void setSubscriptionMode(SubscriptionMode subscriptionMode) {
         this.subscriptionMode = subscriptionMode;
     }
-
+    
+    public void setOfflineOnError(boolean offlineOnError) {
+		this.mOfflineOnError = offlineOnError;
+	}
+    
     /**
      * Reloads the entire roster from the server. This is an asynchronous operation,
      * which means the method will return immediately, and the roster will be
@@ -758,7 +765,7 @@ public class Roster {
      * presence sent from the server. After a disconnection, every Presence is set
      * to offline.
      */
-    private void setOfflinePresences() {
+    public void setOfflinePresences() {
         Presence packetUnavailable;
         for (String user : presenceMap.keySet()) {
             Map<String, Presence> resources = presenceMap.get(user);
--- org/jivesoftware/smack/XMPPConnection.java
+++ org/jivesoftware/smack/XMPPConnection.java
@@ -214,6 +214,9 @@ public class XMPPConnection extends Connection {
         }
 
         // Set the user.
+        if (resource == null)
+        	return ;
+        
         if (response != null) {
             this.user = response;
             // Update the serviceName with the one returned by the server
@@ -980,7 +983,11 @@ public class XMPPConnection extends Connection {
      *      appropiate error messages to end-users.
      */
     public void connect() throws XMPPException {
-        // Stablishes the connection, readers and writers
+    	connect(true);
+    }
+
+    public void connect(boolean bind) throws XMPPException {
+        // Establishes the connection, readers and writers
         connectUsingConfiguration(config);
         // Automatically makes the login if the user was previouslly connected successfully
         // to the server and the connection was terminated abruptly
@@ -993,7 +1000,7 @@ public class XMPPConnection extends Connection {
                 }
                 else {
                     login(config.getUsername(), config.getPassword(),
-                            config.getResource());
+                            bind ? config.getResource() : null);
                 }
                 packetReader.notifyReconnection();
             }
--- /dev/null
+++ org/jivesoftware/smack/packet/UnknownPacket.java
@@ -0,0 +1,38 @@
+/**
+ * $RCSfile$
+ * $Revision: 11824 $
+ * $Date: 2010-08-15 08:13:05 -0700 (Sun, 15 Aug 2010) $
+ *
+ * Copyright 2003-2007 Jive Software.
+ *
+ * All rights reserved. Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.jivesoftware.smack.packet;
+
+import org.jivesoftware.smack.util.StringUtils;
+
+
+/**
+ */
+public abstract class UnknownPacket extends Packet implements PacketExtension {
+	public String toXML() {
+		StringBuilder buf = new StringBuilder();
+		buf.append("<").append(getElementName());
+        if (getXmlns() != null) {
+            buf.append(" xmlns=\"").append(getNamespace()).append("\"");
+        }
+        buf.append("/>");
+        return buf.toString();
+	}
+}
